# Generated by Django 2.2.6 on 2020-09-30 23:17

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=20)),
                ('full_name', models.CharField(blank=True, max_length=255)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('nationality', models.CharField(blank=True, max_length=30, null=True)),
                ('identification_type', models.CharField(blank=True, max_length=20, null=True)),
                ('nric_number', models.CharField(blank=True, max_length=12, null=True)),
                ('gender', models.CharField(blank=True, max_length=20)),
                ('race', models.CharField(blank=True, max_length=20)),
                ('user_type', models.CharField(choices=[('AD', 'Admin'), ('EG', 'eGovernment'), ('PB', 'Public'), ('NA', 'Not Available')], default='PB', max_length=2)),
                ('email', models.EmailField(blank=True, max_length=50, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('home_number', models.CharField(blank=True, max_length=20, null=True)),
                ('office_number', models.CharField(blank=True, max_length=20, null=True)),
                ('fax_number', models.CharField(blank=True, max_length=20, null=True)),
                ('address_1', models.CharField(blank=True, default='NA', max_length=20)),
                ('address_2', models.CharField(blank=True, default='NA', max_length=20)),
                ('address_3', models.CharField(blank=True, default='NA', max_length=20)),
                ('city', models.CharField(blank=True, default='NA', max_length=20)),
                ('postcode', models.CharField(blank=True, default='NA', max_length=20)),
                ('state', models.CharField(blank=True, default='NA', max_length=20)),
                ('country', models.CharField(blank=True, default='NA', max_length=20)),
                ('registration_number', models.CharField(blank=True, max_length=20, null=True)),
                ('company_name', models.CharField(blank=True, max_length=20, null=True)),
                ('company_number', models.CharField(blank=True, max_length=20, null=True)),
                ('company_email', models.CharField(blank=True, max_length=20, null=True)),
                ('company_address_1', models.CharField(blank=True, max_length=20, null=True)),
                ('company_address_2', models.CharField(blank=True, max_length=20, null=True)),
                ('company_address_3', models.CharField(blank=True, max_length=20, null=True)),
                ('company_city', models.CharField(blank=True, max_length=20, null=True)),
                ('company_postcode', models.CharField(blank=True, max_length=20, null=True)),
                ('company_state', models.CharField(blank=True, max_length=20, null=True)),
                ('company_country', models.CharField(blank=True, max_length=20, null=True)),
                ('egov_request', models.CharField(choices=[('NA', 'NA'), ('AP', 'Approved'), ('PD', 'Pending')], default='NA', max_length=2)),
                ('egov_package', models.IntegerField(default=0)),
                ('egov_quota', models.IntegerField(default=0, null=True)),
                ('position_or_grade', models.CharField(blank=True, max_length=30, null=True)),
                ('head_of_department_name', models.CharField(blank=True, max_length=50, null=True)),
                ('head_of_department_position', models.CharField(blank=True, max_length=50, null=True)),
                ('head_of_department_email', models.EmailField(blank=True, max_length=50, null=True)),
                ('ministry_name', models.CharField(blank=True, max_length=50, null=True)),
                ('division_name', models.CharField(blank=True, max_length=50, null=True)),
                ('agency_name', models.CharField(blank=True, max_length=50, null=True)),
                ('department_name', models.CharField(blank=True, max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['full_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
